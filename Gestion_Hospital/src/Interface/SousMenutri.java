/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Classes.*;
import Connexion_Transformation.Question_reponse;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jdbc2014.Connexion;

/**
 *
 * @author Florian
 */
public class SousMenutri extends javax.swing.JFrame {

    private  String LoginECE;
    private  String PasswordECE;
    private  String LoginBDD;
    private  String PasswordBDD;
    ArrayList<String> liste;
    ArrayList liste_generique;
   public Connexion conn;
   
    public SousMenutri(String LoginECE, String PasswordECE, String LoginBDD, String PasswordBDD) {
       
        this.LoginECE = LoginECE;
        this.PasswordECE = PasswordECE;
        this.LoginBDD= LoginBDD;
        this.PasswordBDD = PasswordBDD;
        initComponents();
     
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        MenuDeroulantClass = new javax.swing.JComboBox();
        BoutonValidationClasseTri = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResultatRequete = new javax.swing.JTextArea();
        BoutonNouvelleRecherche = new javax.swing.JButton();
        BoutonRetourPrinc = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        NomCheck = new javax.swing.JCheckBox();
        PrenomCheck = new javax.swing.JCheckBox();
        CodeCheck = new javax.swing.JCheckBox();
        NumeroCheck = new javax.swing.JCheckBox();
        AdresseCheck = new javax.swing.JCheckBox();
        MutuelleCheck = new javax.swing.JCheckBox();
        TelephoneCheck = new javax.swing.JCheckBox();
        NomServiceCheck = new javax.swing.JCheckBox();
        CodeServiceCheck = new javax.swing.JCheckBox();
        BatimentCheck = new javax.swing.JCheckBox();
        DirecteurCheck = new javax.swing.JCheckBox();
        SurveillantCheck = new javax.swing.JCheckBox();
        SpecialiteCheck = new javax.swing.JCheckBox();
        SalaireCheck = new javax.swing.JCheckBox();
        RotationCheck = new javax.swing.JCheckBox();
        NombreLitCheck = new javax.swing.JCheckBox();
        NumeroLitCheck = new javax.swing.JCheckBox();
        NumeroChambreCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SousMenuTri");
        jLabel1.setPreferredSize(new java.awt.Dimension(336, 84));

        MenuDeroulantClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Service", "Malade", "Infirmier", "Docteur", "Chambre", "Hospitalisation" }));
        MenuDeroulantClass.setPreferredSize(new java.awt.Dimension(414, 42));
        MenuDeroulantClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuDeroulantClassMouseClicked(evt);
            }
        });
        MenuDeroulantClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuDeroulantClassActionPerformed(evt);
            }
        });

        BoutonValidationClasseTri.setText("Ok");
        BoutonValidationClasseTri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonValidationClasseTriActionPerformed(evt);
            }
        });

        ResultatRequete.setColumns(20);
        ResultatRequete.setRows(5);
        jScrollPane1.setViewportView(ResultatRequete);

        BoutonNouvelleRecherche.setText("Recherche");
        BoutonNouvelleRecherche.setPreferredSize(new java.awt.Dimension(168, 30));
        BoutonNouvelleRecherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonNouvelleRechercheActionPerformed(evt);
            }
        });

        BoutonRetourPrinc.setText("Retour menu principal");
        BoutonRetourPrinc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonRetourPrincActionPerformed(evt);
            }
        });

        jLayeredPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLayeredPane1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        NomCheck.setText("Nom");
        NomCheck.setAutoscrolls(true);
        NomCheck.setFocusable(false);
        NomCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NomCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NomCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        NomCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NomCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(NomCheck);

        PrenomCheck.setText("Prenom");
        PrenomCheck.setAutoscrolls(true);
        PrenomCheck.setFocusable(false);
        PrenomCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PrenomCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        PrenomCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        PrenomCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrenomCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(PrenomCheck);

        CodeCheck.setText("Code");
        CodeCheck.setAutoscrolls(true);
        CodeCheck.setFocusable(false);
        CodeCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CodeCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        CodeCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        CodeCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodeCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(CodeCheck);

        NumeroCheck.setText("Numero");
        NumeroCheck.setAutoscrolls(true);
        NumeroCheck.setFocusable(false);
        NumeroCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NumeroCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NumeroCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        NumeroCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumeroCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(NumeroCheck);

        AdresseCheck.setText("Adresse");
        AdresseCheck.setAutoscrolls(true);
        AdresseCheck.setFocusable(false);
        AdresseCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        AdresseCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        AdresseCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        AdresseCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdresseCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(AdresseCheck);

        MutuelleCheck.setText("Mutuelle");
        MutuelleCheck.setAutoscrolls(true);
        MutuelleCheck.setFocusable(false);
        MutuelleCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        MutuelleCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        MutuelleCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        MutuelleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MutuelleCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(MutuelleCheck);

        TelephoneCheck.setText("Telephone");
        TelephoneCheck.setAutoscrolls(true);
        TelephoneCheck.setFocusable(false);
        TelephoneCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        TelephoneCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        TelephoneCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        TelephoneCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TelephoneCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(TelephoneCheck);

        NomServiceCheck.setText("Nom Service");
        NomServiceCheck.setAutoscrolls(true);
        NomServiceCheck.setFocusable(false);
        NomServiceCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NomServiceCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NomServiceCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        NomServiceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NomServiceCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(NomServiceCheck);

        CodeServiceCheck.setText("Code Service");
        CodeServiceCheck.setAutoscrolls(true);
        CodeServiceCheck.setFocusable(false);
        CodeServiceCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CodeServiceCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        CodeServiceCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        CodeServiceCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        CodeServiceCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        CodeServiceCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodeServiceCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(CodeServiceCheck);

        BatimentCheck.setText("Batiment");
        BatimentCheck.setAutoscrolls(true);
        BatimentCheck.setFocusable(false);
        BatimentCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BatimentCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        BatimentCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        BatimentCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        BatimentCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        BatimentCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BatimentCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(BatimentCheck);

        DirecteurCheck.setText("Directeur");
        DirecteurCheck.setAutoscrolls(true);
        DirecteurCheck.setFocusable(false);
        DirecteurCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DirecteurCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        DirecteurCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        DirecteurCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        DirecteurCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        DirecteurCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirecteurCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(DirecteurCheck);

        SurveillantCheck.setText("Surveillant");
        SurveillantCheck.setAutoscrolls(true);
        SurveillantCheck.setFocusable(false);
        SurveillantCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SurveillantCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        SurveillantCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        SurveillantCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        SurveillantCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        SurveillantCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SurveillantCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(SurveillantCheck);

        SpecialiteCheck.setText("Specialite");
        SpecialiteCheck.setAutoscrolls(true);
        SpecialiteCheck.setFocusable(false);
        SpecialiteCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SpecialiteCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        SpecialiteCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        SpecialiteCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        SpecialiteCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        SpecialiteCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpecialiteCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(SpecialiteCheck);

        SalaireCheck.setText("Salaire");
        SalaireCheck.setAutoscrolls(true);
        SalaireCheck.setFocusable(false);
        SalaireCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        SalaireCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        SalaireCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        SalaireCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        SalaireCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        SalaireCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalaireCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(SalaireCheck);

        RotationCheck.setText("Rotation");
        RotationCheck.setAutoscrolls(true);
        RotationCheck.setFocusable(false);
        RotationCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        RotationCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        RotationCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        RotationCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        RotationCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        RotationCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotationCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(RotationCheck);

        NombreLitCheck.setText("Nombre Lit");
        NombreLitCheck.setAutoscrolls(true);
        NombreLitCheck.setFocusable(false);
        NombreLitCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NombreLitCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NombreLitCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        NombreLitCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        NombreLitCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        NombreLitCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreLitCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(NombreLitCheck);

        NumeroLitCheck.setText("Numero Lit");
        NumeroLitCheck.setAutoscrolls(true);
        NumeroLitCheck.setFocusable(false);
        NumeroLitCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NumeroLitCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NumeroLitCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        NumeroLitCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        NumeroLitCheck.setPreferredSize(new java.awt.Dimension(109, 25));
        NumeroLitCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumeroLitCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(NumeroLitCheck);

        NumeroChambreCheck.setText("Numero Chambre");
        NumeroChambreCheck.setAutoscrolls(true);
        NumeroChambreCheck.setFocusable(false);
        NumeroChambreCheck.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        NumeroChambreCheck.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NumeroChambreCheck.setMaximumSize(new java.awt.Dimension(109, 25));
        NumeroChambreCheck.setMinimumSize(new java.awt.Dimension(109, 25));
        NumeroChambreCheck.setPreferredSize(new java.awt.Dimension(130, 25));
        NumeroChambreCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumeroChambreCheckActionPerformed(evt);
            }
        });
        jLayeredPane1.add(NumeroChambreCheck);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(472, 472, 472)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(380, 380, 380)
                        .addComponent(BoutonNouvelleRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(181, 181, 181)
                        .addComponent(BoutonRetourPrinc))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MenuDeroulantClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(BoutonValidationClasseTri)))))
                .addContainerGap(114, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1060, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MenuDeroulantClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BoutonValidationClasseTri))
                .addGap(29, 29, 29)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BoutonNouvelleRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BoutonRetourPrinc))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BoutonValidationClasseTri, MenuDeroulantClass});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NomCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NomCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NomCheckActionPerformed

    private void PrenomCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrenomCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PrenomCheckActionPerformed

    private void TelephoneCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TelephoneCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TelephoneCheckActionPerformed

    private void AdresseCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdresseCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AdresseCheckActionPerformed

    private void NumeroCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumeroCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumeroCheckActionPerformed

    private void MutuelleCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MutuelleCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MutuelleCheckActionPerformed

    private void CodeCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodeCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CodeCheckActionPerformed

    private void NomServiceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NomServiceCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NomServiceCheckActionPerformed

    private void BatimentCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BatimentCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BatimentCheckActionPerformed

    private void DirecteurCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirecteurCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DirecteurCheckActionPerformed

    private void CodeServiceCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodeServiceCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CodeServiceCheckActionPerformed

    private void RotationCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotationCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RotationCheckActionPerformed

    private void SalaireCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalaireCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SalaireCheckActionPerformed

    private void SpecialiteCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpecialiteCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SpecialiteCheckActionPerformed

    private void NombreLitCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreLitCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreLitCheckActionPerformed

    private void SurveillantCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SurveillantCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SurveillantCheckActionPerformed

    private void BoutonValidationClasseTriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonValidationClasseTriActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_BoutonValidationClasseTriActionPerformed

    private void MenuDeroulantClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuDeroulantClassActionPerformed
        
// TODO add your handling code here:
        int IndexCb = MenuDeroulantClass.getSelectedIndex();
        System.out.print(IndexCb);
        switch(IndexCb)
        {
            case 0 : //service
                NomServiceCheck.setVisible(true);
                CodeServiceCheck.setVisible(true);
                BatimentCheck.setVisible(true);
                DirecteurCheck.setVisible(true);
                
            break;
            case 1 : //malade
                    NumeroCheck.setVisible(true);
                    NomCheck.setVisible(true);
                    PrenomCheck.setVisible(true);
                    TelephoneCheck.setVisible(true);
                    AdresseCheck.setVisible(true);
                    
                    
            break;
            case 2 : // infirmier
                    NumeroCheck.setVisible(true);
                    CodeServiceCheck.setVisible(true);
                    RotationCheck.setVisible(true);
                    SalaireCheck.setVisible(true);
                    NomCheck.setVisible(true);
                    PrenomCheck.setVisible(true);
                    TelephoneCheck.setVisible(true);
                    AdresseCheck.setVisible(true);
            break;
            case 3 : // Docteur
                    NumeroCheck.setVisible(true);
                    SpecialiteCheck.setVisible(true);
                    NomCheck.setVisible(true);
                    PrenomCheck.setVisible(true);
                    TelephoneCheck.setVisible(true);
                    AdresseCheck.setVisible(true);
        
            break;
            case 4 : // Chambre
                    
                    NumeroChambreCheck.setVisible(true);
                    CodeServiceCheck.setVisible(true);
                    SurveillantCheck.setVisible(true);
                    NombreLitCheck.setVisible(true);
                    
            break;
            case 5 : //hospitalisation
                    NumeroCheck.setVisible(true);
                    NomCheck.setVisible(true);
                    PrenomCheck.setVisible(true);
                    TelephoneCheck.setVisible(true);
                    AdresseCheck.setVisible(true);
                    NumeroChambreCheck.setVisible(true);
                    CodeServiceCheck.setVisible(true);
                    SurveillantCheck.setVisible(true);
                    NombreLitCheck.setVisible(true);
                    NumeroLitCheck.setVisible(true);
                    
        
            break;
        }
        //décocher les checkbox
        PrenomCheck.setSelected(false);
        NombreLitCheck.setSelected(false);
        CodeCheck.setSelected(false);
        CodeServiceCheck.setSelected(false);
        NumeroCheck.setSelected(false);
        BatimentCheck.setSelected(false);
        NomCheck.setSelected(false);
        TelephoneCheck.setSelected(false);
        DirecteurCheck.setSelected(false);
        SurveillantCheck.setSelected(false);
        SpecialiteCheck.setSelected(false);
        NomServiceCheck.setSelected(false);
        AdresseCheck.setSelected(false);
        MutuelleCheck.setSelected(false);
        RotationCheck.setSelected(false);
        SalaireCheck.setSelected(false);
        NumeroLitCheck.setSelected(false);
        NumeroChambreCheck.setSelected(false);
        
    }//GEN-LAST:event_MenuDeroulantClassActionPerformed

    private void NumeroLitCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumeroLitCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumeroLitCheckActionPerformed

    private void BoutonRetourPrincActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonRetourPrincActionPerformed
        // TODO add your handling code here:
          this.dispose();
        Menu_principal menu_princ = new Menu_principal(LoginECE,PasswordECE,LoginBDD,PasswordBDD);
        menu_princ.setVisible(true);
        System.out.println(LoginECE);
         System.out.println(PasswordECE);
          System.out.println(LoginBDD);
           System.out.println(PasswordBDD);
    }//GEN-LAST:event_BoutonRetourPrincActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        PrenomCheck.setVisible(false);
        NombreLitCheck.setVisible(false);
        CodeCheck.setVisible(false);
        CodeServiceCheck.setVisible(false);
        NumeroCheck.setVisible(false);
        BatimentCheck.setVisible(false);
        NomCheck.setVisible(false);
        TelephoneCheck.setVisible(false);
        DirecteurCheck.setVisible(false);
        SurveillantCheck.setVisible(false);
        SpecialiteCheck.setVisible(false);
        NomServiceCheck.setVisible(false);
        AdresseCheck.setVisible(false);
        MutuelleCheck.setVisible(false);
        RotationCheck.setVisible(false);
        SalaireCheck.setVisible(false);
        NumeroLitCheck.setVisible(false);
        NumeroChambreCheck.setVisible(false);
    }//GEN-LAST:event_formWindowActivated

    private void MenuDeroulantClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuDeroulantClassMouseClicked
        // TODO add your handling code here:
        PrenomCheck.setVisible(false);
        NombreLitCheck.setVisible(false);
        CodeCheck.setVisible(false);
        CodeServiceCheck.setVisible(false);
        NumeroCheck.setVisible(false);
        BatimentCheck.setVisible(false);
        NomCheck.setVisible(false);
        TelephoneCheck.setVisible(false);
        DirecteurCheck.setVisible(false);
        SurveillantCheck.setVisible(false);
        SpecialiteCheck.setVisible(false);
        NomServiceCheck.setVisible(false);
        AdresseCheck.setVisible(false);
        MutuelleCheck.setVisible(false);
        RotationCheck.setVisible(false);
        SalaireCheck.setVisible(false);
        NumeroLitCheck.setVisible(false);
        NumeroChambreCheck.setVisible(false);
    }//GEN-LAST:event_MenuDeroulantClassMouseClicked

    private void NumeroChambreCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumeroChambreCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumeroChambreCheckActionPerformed

    private void BoutonNouvelleRechercheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonNouvelleRechercheActionPerformed
        // TODO add your handling code here:
        String requete, mot;
        char[] a;
        ArrayList<String> reponseBDD = null;
        requete=creer_requête();
        try {
            conn=new Connexion(LoginECE, PasswordECE, LoginBDD, PasswordBDD);
        } catch (SQLException ex) {
            Logger.getLogger(SousMenutri.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SousMenutri.class.getName()).log(Level.SEVERE, null, ex);
        }
        Question_reponse q_r = new Question_reponse();
        try {
            reponseBDD=conn.remplirChampsRequete(requete);
        } catch (SQLException ex) {
            Logger.getLogger(SousMenutri.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
                    mot="Vérification:\n";
            
            for(int i=0; i<reponseBDD.size(); i++)
            {
                mot=mot+reponseBDD.toString()+"\n";
            }
            
            a=mot.toCharArray();
            mot="Vérification:\n";
            
            for(int i=0; i<a.length; i++)
            {
                if(a[i]==',' || a[i]=='[' || a[i]==']' || a[i]==';')
                {
                    a[i]=' ';
                }
                mot=mot+a[i];
            }
        ResultatRequete.setText(mot);
        reponseBDD = q_r.methodechiante(LoginECE,PasswordECE,LoginBDD,PasswordBDD,requete);
    }//GEN-LAST:event_BoutonNouvelleRechercheActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SousMenutri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SousMenutri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SousMenutri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SousMenutri.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SousMenutri("ducrocq","KlrIT05A@","ducrocq-rw","KlrIT05A@").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AdresseCheck;
    private javax.swing.JCheckBox BatimentCheck;
    private javax.swing.JButton BoutonNouvelleRecherche;
    private javax.swing.JButton BoutonRetourPrinc;
    private javax.swing.JButton BoutonValidationClasseTri;
    private javax.swing.JCheckBox CodeCheck;
    private javax.swing.JCheckBox CodeServiceCheck;
    private javax.swing.JCheckBox DirecteurCheck;
    private javax.swing.JComboBox MenuDeroulantClass;
    private javax.swing.JCheckBox MutuelleCheck;
    private javax.swing.JCheckBox NomCheck;
    private javax.swing.JCheckBox NomServiceCheck;
    private javax.swing.JCheckBox NombreLitCheck;
    private javax.swing.JCheckBox NumeroChambreCheck;
    private javax.swing.JCheckBox NumeroCheck;
    private javax.swing.JCheckBox NumeroLitCheck;
    private javax.swing.JCheckBox PrenomCheck;
    private javax.swing.JTextArea ResultatRequete;
    private javax.swing.JCheckBox RotationCheck;
    private javax.swing.JCheckBox SalaireCheck;
    private javax.swing.JCheckBox SpecialiteCheck;
    private javax.swing.JCheckBox SurveillantCheck;
    private javax.swing.JCheckBox TelephoneCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

   
   public void test_requete (){ //renplie l'ArrayList de la classe attendu avec la requête rendu
              //////POUR TABLE CHAMBRE/////////////
       int IndexCb = MenuDeroulantClass.getSelectedIndex();
        if(IndexCb == 4)//on teste la requête pour savoir quel sont les classes demandées
        {
            //chambre séléctionné
            //on crée un arraylist pour stocker le résultat
            liste_generique=new ArrayList<chambre>();
            //on initialise les attributs temporaires
             String tmp_code_service="";
             int tmp_no_chambre=0;
             int tmp_surveillant=0;
             int tmp_nb_lits=0;
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
                if(CodeServiceCheck.isSelected()){
                     tmp_code_service=str[i];
                     i++;
                }
                if(NumeroCheck.isSelected()){
                     tmp_no_chambre=Integer.parseInt(str[i]);
                    i++;
                }
                if(SurveillantCheck.isSelected()){
                    tmp_surveillant=Integer.parseInt(str[i]);
                    i++;
                }
                if(NombreLitCheck.isSelected()){
                    tmp_nb_lits=Integer.parseInt(str[i]);
                    i++;
                }
                    
                //remplissage de la classse et ajout à l'ArrayList
                chambre tmp = new chambre(tmp_code_service,tmp_no_chambre,tmp_surveillant,tmp_nb_lits);
                liste_generique.add(tmp);
            }
        }
        ///////POUR TABLE DOCTEUR/////////////
        if(IndexCb==3)
        {
            liste_generique=new ArrayList<docteur>();
             //...
        
            int tmp_numero=0;
            String tmp_specialite="";
            String tmp_nom="";
            String tmp_prenom="";
            String tmp_tel="";
            String tmp_adresse="";
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
               
                if(NumeroCheck.isSelected()){
                    tmp_numero=Integer.parseInt(str[i]);
                    i++;
                }
                if(SpecialiteCheck.isSelected()){
                   tmp_specialite=str[i];
                   i++;
                }
                if(NomCheck.isSelected()){
                   tmp_nom=str[i];
                   i++;
                }
                if(PrenomCheck.isSelected()){
                   tmp_prenom=str[i];
                   i++;
                }
                if(AdresseCheck.isSelected()){
                  tmp_adresse=str[i];
                   i++;
                }
                if(TelephoneCheck.isSelected()){
                   tmp_tel=str[i];
                   i++;
                }
                
                    
                //remplissage de la classse et ajout à l'ArrayList
                docteur tmp = new docteur(tmp_numero,tmp_specialite,tmp_nom,tmp_prenom,tmp_tel,tmp_adresse);
                liste_generique.add(tmp);
                
            }
            //Fin des tests pour la table docteur
        }
       
        //////POUR TABLE INFIRMIER/////////////
        if(IndexCb==2)
        {
            liste_generique=new ArrayList<infirmier>();
             //...
        
            int tmp_numero=0;
            String tmp_code_service="";
            String tmp_nom="";
            String tmp_prenom="";
            String tmp_tel="";
            String tmp_adresse="";
            boolean tmp_rotation=false;
            int tmp_salaire=0;
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
               
                if(NumeroCheck.isSelected()){
                    tmp_numero=Integer.parseInt(str[i]);
                    i++;
                }
                if(CodeServiceCheck.isSelected()){
                   tmp_code_service=str[i];
                   i++;
                }
                if(NomCheck.isSelected()){
                   tmp_nom=str[i];
                   i++;
                }
                if(PrenomCheck.isSelected()){
                   tmp_prenom=str[i];
                   i++;
                }
                if(AdresseCheck.isSelected()){
                  tmp_adresse=str[i];
                   i++;
                }
                if(TelephoneCheck.isSelected()){
                   tmp_tel=str[i];
                   i++;
                }
                if(RotationCheck.isSelected()){
                    if(str[i].equals("NUIT")){
                    tmp_rotation=false;
                    }
                    else tmp_rotation=true;
                    i++;
                }
                if(SalaireCheck.isSelected()){
                    tmp_salaire=Integer.parseInt(str[i]);
                    i++;
                }
                
                    
                //remplissage de la classse et ajout à l'ArrayList
                infirmier tmp = new infirmier(tmp_numero,tmp_code_service,tmp_rotation,tmp_salaire,tmp_nom,tmp_prenom,tmp_tel,tmp_adresse);
                liste_generique.add(tmp);
                
            }
            //Fin des tests pour la table infirmier
        }
        //////POUR TABLE MALADE/////////////
        if(IndexCb==1)
        {
            liste_generique=new ArrayList<malade>();
             //...
        
            int tmp_numero=0;
           
            String tmp_nom="";
            String tmp_prenom="";
            String tmp_tel="";
            String tmp_adresse="";
            String tmp_mutuelle="";
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
               
                if(NumeroCheck.isSelected()){
                    tmp_numero=Integer.parseInt(str[i]);
                    i++;
                }
                
                if(NomCheck.isSelected()){
                   tmp_nom=str[i];
                   i++;
                }
                if(PrenomCheck.isSelected()){
                   tmp_prenom=str[i];
                   i++;
                }
                if(AdresseCheck.isSelected()){
                  tmp_adresse=str[i];
                   i++;
                }
                if(TelephoneCheck.isSelected()){
                   tmp_tel=str[i];
                   i++;
                }
                
                if(MutuelleCheck.isSelected()){
                    tmp_mutuelle=str[i];
                    i++;
                }
                
                    
                //remplissage de la classse et ajout à l'ArrayList
                malade tmp = new malade(tmp_numero,tmp_nom,tmp_prenom,tmp_tel,tmp_adresse,tmp_mutuelle);
                liste_generique.add(tmp);
                
            }
        //fin remplissage MALADE
        
    }
        //////POUR TABLE SERVICE/////////////
        if(IndexCb==0)
        {
            liste_generique=new ArrayList<service>();
             //...
        
           
            String tmp_code="";
            String tmp_nom="";
            String tmp_batiment="";
            int tmp_directeur=0;
            
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
               
                if(CodeCheck.isSelected()){
                    tmp_code=str[i];
                    i++;
                }
                if(NomCheck.isSelected()){
                    tmp_nom=str[i];
                    i++;
                }
                if(BatimentCheck.isSelected()){
                   tmp_batiment=str[i];
                   i++;
                }
                if(DirecteurCheck.isSelected()){
                   tmp_directeur=Integer.parseInt(str[i]);
                   i++;
                }
                //remplissage de la classse et ajout à l'ArrayList
                service tmp = new service(tmp_code,tmp_nom,tmp_batiment,tmp_directeur);
                liste_generique.add(tmp);
                
            }
        }
        //////POUR TABLE CHAMBRE/////////////
        if(IndexCb==4)
        {
            liste_generique=new ArrayList<chambre>();
             //...
        
           
            String tmp_code_service="";
            int tmp_no_chambre=0;
            int tmp_surveillant=0;
            int tmp_nb_lits=0;
            
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
               
                if(CodeServiceCheck.isSelected()){
                    tmp_code_service=str[i];
                    i++;
                }
                if(NomCheck.isSelected()){
                    tmp_no_chambre=Integer.parseInt(str[i]);
                    i++;
                }
                if(SurveillantCheck.isSelected()){
                   tmp_surveillant=Integer.parseInt(str[i]);
                   i++;
                }
                if(NombreLitCheck.isSelected()){
                   tmp_nb_lits=Integer.parseInt(str[i]);
                   i++;
                }
                //remplissage de la classse et ajout à l'ArrayList
                chambre tmp = new chambre(tmp_code_service,tmp_no_chambre,tmp_surveillant,tmp_nb_lits);
                liste_generique.add(tmp);
                
            }
        }
        ///TABLE HOSPITALISATION////
        if(IndexCb==5)
        {
            liste_generique=new ArrayList<hospitalisation>();
             //...
        
            String tmp_code_service="";
            int tmp_no_malade=0;
            int tmp_no_chambre=0;
            int tmp_lit=0;
            
            
            //pour chaque champ rempli d'une string, on remplit la classe correspondnte
            for (String s : liste) {
                //décomposition de la réponse en fonction de la question (dépend de l'interface graphique)
                //et on "coupe" à chaque virgule(séparation des attributs)
                String[] str=s.split(",");
                
                int i=0;
               
                if(NumeroCheck.isSelected()){
                    tmp_no_malade=Integer.parseInt(str[i]);;;
                    i++;
                }
                if(NumeroChambreCheck.isSelected()){
                    tmp_no_chambre=Integer.parseInt(str[i]);
                    i++;
                }
                if(CodeServiceCheck.isSelected()){
                   tmp_code_service=str[i];
                   i++;
                }
                if(NumeroLitCheck.isSelected()){
                   tmp_lit=Integer.parseInt(str[i]);;
                   i++;
                }
                //remplissage de la classse et ajout à l'ArrayList
               hospitalisation tmp = new hospitalisation(tmp_code_service,tmp_no_malade,tmp_no_chambre, tmp_lit);
                liste_generique.add(tmp);
                
            }
               ///FIN TABLE HOSPITALISATION 
        }
   }
   
   public String creer_requête(){
       String requete="select ";
       String select_text="";
       int compteur=0;
       String from_text="";
       String where_text="";
       int IndexCb = MenuDeroulantClass.getSelectedIndex();
       //créer la requête à partir de la GUI
       //si on a selectionné une table, on ajoute son nom au FROM de la requête
       //selection de la table
       if(IndexCb==3){
           from_text="employe e,doctor d";
           where_text="d.numero=e.numero";
       }
       if(IndexCb==1){
           from_text="malade m";
       }
       if(IndexCb==2){
           from_text="employe e, infirmier i, service s";
           where_text="i.numero=e.numero AND s.code LIKE i.code_service";
       }
       if(IndexCb==4) 
           from_text="chambre c";
       if(IndexCb==0) 
           from_text="service s";
       if(IndexCb==5){
           from_text="service s, malade m, chambre c, hospitalisation h";
           where_text="h.no_malade=m.numero AND h.no_chambre=c.no_chambre AND h.code_service LIKE s.code";
           compteur++;
       }
       //selection des attributs
       if(NomCheck.isSelected()){
           select_text=select_text+"nom,";
           compteur++;
       }
       if(PrenomCheck.isSelected()){
           select_text=select_text+"prenom,";
           compteur++;
       }
       if(TelephoneCheck.isSelected()){
           select_text=select_text+"tel,";
           compteur++;
       }
       if(AdresseCheck.isSelected()){
           select_text=select_text+"adresse,";
           compteur++;
       }
       if(NumeroCheck.isSelected()){
           select_text=select_text+"numero,";
           compteur++;
       }
       if(MutuelleCheck.isSelected()){
           select_text=select_text+"mutuelle,";
           compteur++;
       }
       if(CodeCheck.isSelected()){
           select_text=select_text+"code,";
           compteur++;
       }
       if(NomServiceCheck.isSelected()){
           select_text=select_text+"nom,";
           compteur++;
       }
       if(BatimentCheck.isSelected()){
           select_text=select_text+"batiment,";
           compteur++;
       }
       if(DirecteurCheck.isSelected()){
           select_text=select_text+"directeur,";
           compteur++;
       }
       if(CodeServiceCheck.isSelected()){
           select_text=select_text+"code,";
           compteur++;
       }
       if(NumeroChambreCheck.isSelected()){
           select_text=select_text+"no_chambre,";
           compteur++;  
       }
       if(SurveillantCheck.isSelected()){
           select_text=select_text+"surveillant,";
           compteur++;
       }
       if(NombreLitCheck.isSelected()){
           select_text=select_text+"nb_lits,";
           compteur++;
       }
       if(MutuelleCheck.isSelected()){
           select_text=select_text+"mutuelle";
           compteur++;
       }
       if(SpecialiteCheck.isSelected()){
           select_text=select_text+"specialite";
           compteur++;
       }
       if(compteur!=0){
           System.out.println("compteur="+compteur);
           //enlever la dernière virgule à la partie SELECT
            select_text=select_text.substring(0,select_text.length()-1);
            //ajouter les from
            
             requete=requete+select_text+" from "+from_text;
             if(where_text!=""){
                 requete=requete+" where "+where_text;
             }
        }
       //afficher un message d'alerte
       else JOptionPane.showMessageDialog(null, "Sélectionnez au moins un attribut!");
      
       //rendre la requete 
       return requete;
   }
   
}
